# Stage 1: Build stage
FROM elixir:1.15-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    build-base \
    git \
    nodejs \
    npm

# Set build environment
ENV MIX_ENV=prod

# Create app directory
WORKDIR /app

# Accept app name as build argument
ARG APP_NAME
ENV APP_NAME=${APP_NAME}

# Validate that APP_NAME is provided
RUN if [ -z "$APP_NAME" ]; then \
    echo "ERROR: APP_NAME build argument is required" && exit 1; \
    fi

COPY libs/elixir/ ./libs/elixir/
# Copy mix files
COPY mix.exs mix.lock ./
COPY config/ ./config/
COPY apps/elixir/ ./apps/elixir/

RUN ls ./

# Install hex and rebar
RUN mix local.hex --force && \
    mix local.rebar --force

# Install dependencies
RUN mix deps.get --only=prod

# Compile dependencies
RUN mix deps.compile

# Compile the application
RUN mix compile

# Build the release for the specific app
RUN mix release ${APP_NAME}

# Stage 2: Runtime stage
FROM alpine:3.18 AS runtime

# Install runtime dependencies
RUN apk add --no-cache \
    openssl \
    ncurses-libs \
    libstdc++ \
    libgcc

# Create non-root user
RUN addgroup -g 1001 -S elixir && \
    adduser -S -D -H -u 1001 -h /app -s /bin/sh -G elixir elixir

# Set working directory
WORKDIR /app

# Accept app name as build argument for runtime
ARG APP_NAME
ENV APP_NAME=${APP_NAME}

# Copy the release from builder stage
COPY --from=builder --chown=elixir:elixir /app/_build/prod/rel/${APP_NAME} ./

# Switch to non-root user
USER elixir

# Start the application
CMD ["sh", "-c", "./bin/${APP_NAME} start"]