services:
    postgres:
        image: postgres:latest
        # restart: always
        container_name: postgres
        mem_limit: 256M
        cpus: "0.5"
        deploy:
            resources:
                limits:
                    memory: 256M
                    cpus: "0.5"
                reservations:
                    memory: 128M
                    cpus: "0.25"
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB_NAME}
            POSTGRES_SSL_MODE: disable
        ports:
            - 5432:5432
        volumes:
            - pgdata:/var/lib/postgresql/data
        networks:
            - net

    mongo:
        image: mongo:latest
        # restart: always
        container_name: mongo
        mem_limit: 256M
        cpus: "0.5"
        deploy:
            resources:
                limits:
                    memory: 256M
                    cpus: "0.5"
                reservations:
                    memory: 128M
                    cpus: "0.25"
        ports:
            - 27017:27017
        volumes:
            - mongo_data:/data/db
        networks:
            - net

    rmq:
        image: rabbitmq:management-alpine
        container_name: rmq
        mem_limit: 256M
        cpus: "0.5"
        deploy:
            resources:
                limits:
                    memory: 256M
                    cpus: "0.5"
                reservations:
                    memory: 128M
                    cpus: "0.25"
        ports:
            - 5672:5672
            - 15672:15672
        depends_on:
            - postgres
        environment:
            RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
            RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
        networks:
            - net
        volumes:
            - rmqdata:/var/lib/rabbitmq

    main-service:
        # restart: always
        container_name: main-service
        image: main-service:latest
        ports:
            - 8080:8080
        networks:
            - net
        depends_on:
            - postgres
            - mongo
        build:
            context: .
            dockerfile: Dockerfile.backend-rust
            args:
                APP_NAME: main
        environment:
            DATABASE_URL: ${DATABASE_URL}
            PORT: ${MAIN_SERVICE_PORT}
            JWT_SECRET: ${JWT_SECRET}
            MONGODB_URL: ${MONGODB_URL}
            RABBITMQ_URL: ${RABBITMQ_URL}

    # mailer-service:
    #     # restart: always
    #     container_name: mailer-service
    #     image: mailer-service:latest
    #     ports:
    #         - 8081:8081
    #     depends_on:
    #         - postgres
    #     build:
    #         context: ./apps/backend/mailer
    #     environment:
    #         GIN_MODE: release
    #         SELF_PORT: 8081
    #         EMAIL_ADDRESS: ${EMAIL_ADDRESS}
    #         EMAIL_PASSWORD: ${EMAIL_PASSWORD}
    #         CONFIRM_EMAIL_URL: ${CONFIRM_EMAIL_URL}
    #         RESET_PASSWORD_EMAIL_URL: ${RESET_PASSWORD_EMAIL_URL}
    #     networks:
    #         - net

    storage-service:
        # restart: always
        container_name: storage-service
        image: storage-service:latest
        ports:
            - 8082:8082
        depends_on:
            - postgres
        build:
            context: .
            dockerfile: Dockerfile.backend-rust
            args:
                APP_NAME: storage
        environment:
            SELF_PORT: ${STORAGE_SERVICE_PORT}
            SELF_HOST: ${STORAGE_SERVICE_HOST}
            STATIC_FOLDER_PATH: ${STORAGE_SERVICE_STATIC_FOLDER_PATH}
            DATABASE_URL: ${DATABASE_URL}
        networks:
            - net
        volumes:
            - storage:/static

    socket-service:
        # restart: always
        container_name: socket-service
        image: socket-service:latest
        ports:
            - 8079:8079
        depends_on:
            - rmq
        build:
            context: .
            dockerfile: Dockerfile.backend-elixir
            args:
                APP_NAME: notifications
        environment:
            RABBITMQ_URL: ${RABBITMQ_URL}
            DATABASE_URL: ${DATABASE_URL}
            SECRET_KEY_BASE: ${SECRET_KEY_BASE}
        networks:
            - net

    task-manager:
        # restart: always
        build:
            context: .
            dockerfile: Dockerfile.frontend
            args:
                APP_NAME: task-manager
        container_name: task-manager
        image: task-manager:latest
        ports:
            - 1346:80
        networks:
            - net

networks:
    net:

volumes:
    pgdata:
    mongo_data:
    storage:
    rmqdata:

